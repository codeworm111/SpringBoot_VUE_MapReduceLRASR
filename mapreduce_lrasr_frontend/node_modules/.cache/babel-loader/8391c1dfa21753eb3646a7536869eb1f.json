{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n//\nimport plupload from 'plupload/js/plupload.full.min.js';\nexport default {\n  name: \"Uploader\",\n  props: {\n    browse_button: {\n      type: String\n    },\n    container: {\n      type: String\n    },\n    url: {\n      type: String\n    },\n    filters: {\n      type: Object\n    },\n    headers: {\n      type: Object\n    },\n    multipart_params: {\n      type: Object\n    },\n    resize: {\n      type: Object\n    },\n    drop_element: {\n      type: String\n    },\n    required_features: {\n      type: String\n    },\n    runtimes: {\n      type: String,\n      default: function _default() {\n        return \"html5,flash,silverlight,html4\";\n      }\n    },\n    chunk_size: {\n      type: String,\n      default: function _default() {\n        return \"0\";\n      }\n    },\n    multipart: {\n      type: Boolean,\n      default: function _default() {\n        return true;\n      }\n    },\n    max_retries: {\n      type: Number,\n      default: function _default() {\n        return 0;\n      }\n    },\n    multi_selection: {\n      type: Boolean,\n      default: function _default() {\n        return true;\n      }\n    },\n    unique_names: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    file_data_name: {\n      type: String,\n      default: function _default() {\n        return \"file\";\n      }\n    },\n    flash_swf_url: {\n      type: String,\n      default: function _default() {\n        return 'plupload/js/Moxie.swf';\n      }\n    },\n    silverlight_xap_url: {\n      type: String,\n      default: function _default() {\n        return \"plupload/js/Moxie.xap\";\n      }\n    },\n    Init: {\n      type: Function\n    },\n    PostInit: {\n      type: Function\n    },\n    Browse: {\n      type: Function\n    },\n    OptionChanged: {\n      type: Function\n    },\n    Refresh: {\n      type: Function\n    },\n    StateChanged: {\n      type: Function\n    },\n    UploadFile: {\n      type: Function\n    },\n    BeforeUpload: {\n      type: Function\n    },\n    QueueChanged: {\n      type: Function\n    },\n    UploadProgress: {\n      type: Function\n    },\n    FilesRemoved: {\n      type: Function\n    },\n    FileFiltered: {\n      type: Function\n    },\n    FilesAdded: {\n      type: Function\n    },\n    FileUploaded: {\n      type: Function\n    },\n    ChunkUploaded: {\n      type: Function\n    },\n    UploadComplete: {\n      type: Function\n    },\n    Error: {\n      type: Function\n    },\n    Destroy: {\n      type: Function\n    }\n  },\n  data: function data() {\n    return {\n      up: {}\n    };\n  },\n  watch: {\n    up: function up(val) {\n      this.$emit('inputUploader', val);\n    }\n  },\n  methods: {\n    init: function init() {\n      var that = this;\n      var preInitMethod = {\n        Init: function Init(up, info) {\n          if (that.Init != null) {\n            that.Init(up, info);\n          }\n        },\n        UploadFile: function UploadFile(up, file) {\n          if (that.UploadFile != null) {\n            that.UploadFile(up, file);\n          }\n        }\n      };\n      var initMethod = {\n        PostInit: function PostInit() {\n          if (that.PostInit != null) {\n            that.PostInit();\n          }\n        },\n        Browse: function Browse(up) {\n          if (that.Browse != null) {\n            that.Browse(up);\n          }\n        },\n        OptionChanged: function OptionChanged(up, name, value, oldValue) {\n          if (that.OptionChanged != null) {\n            that.OptionChanged(up, name, value, oldValue);\n          }\n        },\n        Refresh: function Refresh(up) {\n          if (that.Refresh != null) {\n            that.Refresh(up);\n          }\n        },\n        StateChanged: function StateChanged(up) {\n          if (that.StateChanged != null) {\n            that.StateChanged(up);\n          }\n        },\n        BeforeUpload: function BeforeUpload(up, file) {\n          if (that.BeforeUpload != null) {\n            that.BeforeUpload(up, file);\n          }\n        },\n        QueueChanged: function QueueChanged(up) {\n          if (that.QueueChanged != null) {\n            that.QueueChanged(up);\n          }\n        },\n        UploadProgress: function UploadProgress(up, file) {\n          if (that.UploadProgress != null) {\n            that.UploadProgress(up, file);\n          }\n        },\n        FilesRemoved: function FilesRemoved(up, files) {\n          if (that.FilesRemoved != null) {\n            that.FilesRemoved(up, files);\n          }\n        },\n        FileFiltered: function FileFiltered(up, file) {\n          if (that.FileFiltered != null) {\n            that.FileFiltered(up, file);\n          }\n        },\n        FilesAdded: function FilesAdded(up, files) {\n          if (that.FilesAdded != null) {\n            that.FilesAdded(up, files);\n          }\n        },\n        FileUploaded: function FileUploaded(up, file, info) {\n          if (that.FileUploaded != null) {\n            that.FileUploaded(up, file, info);\n          }\n        },\n        ChunkUploaded: function ChunkUploaded(up, file, info) {\n          if (that.ChunkUploaded != null) {\n            that.ChunkUploaded(up, file, info);\n          }\n        },\n        UploadComplete: function UploadComplete(up, files) {\n          if (that.UploadComplete != null) {\n            that.UploadComplete(up, files);\n          }\n        },\n        Error: function Error(up, args) {\n          if (that.Error != null) {\n            that.Error(up, args);\n          }\n        },\n        Destroy: function Destroy(up) {\n          if (that.Destroy != null) {\n            that.Destroy(up);\n          }\n        }\n      };\n      var prop = {\n        runtimes: this.runtimes,\n        browse_button: this.browse_button,\n        container: this.container,\n        url: this.url,\n        chunk_size: this.chunk_size,\n        headers: this.headers,\n        multipart: this.multipart,\n        max_retries: this.max_retries,\n        multi_selection: this.multi_selection,\n        unique_names: this.unique_names,\n        file_data_name: this.file_data_name,\n        flash_swf_url: this.flash_swf_url,\n        silverlight_xap_url: this.silverlight_xap_url,\n        preinit: preInitMethod,\n        init: initMethod\n      };\n\n      if (this.filters != null) {\n        prop[\"filters\"] = this.filters;\n      }\n\n      if (this.multipart_params != null) {\n        prop[\"multipart_params\"] = this.multipart_params;\n      }\n\n      if (this.resize != null) {\n        prop[\"resize\"] = this.resize;\n      }\n\n      if (this.drop_element != null) {\n        prop[\"drop_element\"] = this.drop_element;\n      }\n\n      if (this.required_features != null) {\n        prop[\"required_features\"] = this.required_features;\n      }\n\n      var uploader = new plupload.Uploader(prop);\n      uploader.init();\n      /**finally catch it */\n\n      this.up = uploader;\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","browse_button","type","container","url","filters","headers","multipart_params","resize","drop_element","required_features","runtimes","default","chunk_size","multipart","max_retries","multi_selection","unique_names","file_data_name","flash_swf_url","silverlight_xap_url","Init","PostInit","Browse","OptionChanged","Refresh","StateChanged","UploadFile","BeforeUpload","QueueChanged","UploadProgress","FilesRemoved","FileFiltered","FilesAdded","FileUploaded","ChunkUploaded","UploadComplete","Error","Destroy","data","up","watch","val","methods","init","info","that","file","value","oldValue","files","args","preinit","prop","uploader","mounted"],"sourceRoot":"src/components","sources":["Uploader.vue"],"sourcesContent":["<template></template>\n<script>\n  import plupload from 'plupload/js/plupload.full.min.js'\n  export default {\n    name: \"Uploader\",\n    props: {\n      browse_button: {\n        type: String\n      },\n      container: {\n        type: String\n      },\n      url: {\n        type: String\n      },\n      filters: {\n        type: Object\n      },\n      headers: {\n        type: Object\n      },\n      multipart_params: {\n        type: Object\n      },\n      resize: {\n        type: Object\n      },\n      drop_element: {\n        type: String\n      },\n      required_features: {\n        type: String\n      },\n      runtimes: {\n        type: String,\n        default() {\n          return \"html5,flash,silverlight,html4\";\n        }\n      },\n      chunk_size: {\n        type: String,\n        default() {\n          return \"0\";\n        }\n      },\n      multipart: {\n        type: Boolean,\n        default(){\n          return true;\n        }\n      },\n      max_retries: {\n        type: Number,\n        default() {\n          return 0;\n        }\n      },\n      multi_selection: {\n        type: Boolean,\n        default() {\n          return true;\n        }\n      },\n      unique_names: {\n        type: Boolean,\n        default() {\n          return false;\n        }\n      },\n      file_data_name: {\n        type: String,\n        default() {\n          return \"file\";\n        }\n      },\n      flash_swf_url: {\n        type: String,\n        default() {\n          return 'plupload/js/Moxie.swf';\n        }\n      },\n      silverlight_xap_url: {\n        type: String,\n        default() {\n          return \"plupload/js/Moxie.xap\";\n        }\n      },\n      Init: {\n        type: Function\n      },\n      PostInit: {\n        type: Function\n      },\n      Browse: {\n        type: Function\n      },\n      OptionChanged: {\n        type: Function\n      },\n      Refresh: {\n        type: Function\n      },\n      StateChanged: {\n        type: Function\n      },\n      UploadFile: {\n        type: Function\n      },\n      BeforeUpload: {\n        type: Function\n      },\n      QueueChanged: {\n        type: Function\n      },\n      UploadProgress: {\n        type: Function\n      },\n      FilesRemoved: {\n        type: Function\n      },\n      FileFiltered: {\n        type: Function\n      },\n      FilesAdded: {\n        type: Function\n      },\n      FileUploaded: {\n        type: Function\n      },\n      ChunkUploaded: {\n        type: Function\n      },\n      UploadComplete: {\n        type: Function\n      },\n      Error: {\n        type: Function\n      },\n      Destroy: {\n        type: Function\n      }\n    },\n    data() {\n      return {\n        up: {},\n      }\n    },\n    watch: {\n      up(val) {\n        this.$emit('inputUploader', val);\n      }\n    },\n    methods: {\n      init() {\n        let that = this;\n        const preInitMethod = {\n          Init(up, info) {\n            if (that.Init != null) {\n              that.Init(up, info);\n            }\n          },\n          UploadFile(up, file) {\n            if (that.UploadFile != null) {\n              that.UploadFile(up, file);\n            }\n          }\n        };\n        const initMethod = {\n          PostInit() {\n            if (that.PostInit != null) {\n              that.PostInit();\n            }\n          },\n          Browse(up) {\n            if (that.Browse != null) {\n              that.Browse(up);\n            }\n          },\n          OptionChanged(up, name, value, oldValue) {\n            if (that.OptionChanged != null) {\n              that.OptionChanged(up, name, value, oldValue);\n            }\n          },\n          Refresh(up) {\n            if (that.Refresh != null) {\n              that.Refresh(up);\n            }\n          },\n          StateChanged(up) {\n            if (that.StateChanged != null) {\n              that.StateChanged(up);\n            }\n          },\n          BeforeUpload(up, file) {\n            if (that.BeforeUpload != null) {\n              that.BeforeUpload(up, file);\n            }\n          },\n          QueueChanged(up) {\n            if (that.QueueChanged != null) {\n              that.QueueChanged(up);\n            }\n          },\n          UploadProgress(up, file) {\n            if (that.UploadProgress != null) {\n              that.UploadProgress(up, file);\n            }\n          },\n          FilesRemoved(up, files) {\n            if (that.FilesRemoved != null) {\n              that.FilesRemoved(up, files);\n            }\n          },\n          FileFiltered(up, file) {\n            if (that.FileFiltered != null) {\n              that.FileFiltered(up, file);\n            }\n          },\n          FilesAdded(up, files) {\n            if (that.FilesAdded != null) {\n              that.FilesAdded(up, files);\n            }\n          },\n          FileUploaded(up, file, info) {\n            if (that.FileUploaded != null) {\n              that.FileUploaded(up, file, info);\n            }\n          },\n          ChunkUploaded(up, file, info) {\n            if (that.ChunkUploaded != null) {\n              that.ChunkUploaded(up, file, info);\n            }\n          },\n          UploadComplete(up, files) {\n            if (that.UploadComplete != null) {\n              that.UploadComplete(up, files);\n            }\n          },\n          Error(up, args) {\n            if (that.Error != null) {\n              that.Error(up, args);\n            }\n          },\n          Destroy(up) {\n            if (that.Destroy != null) {\n              that.Destroy(up);\n            }\n          }\n        };\n        let prop = {\n          runtimes: this.runtimes,\n          browse_button: this.browse_button,\n          container: this.container,\n          url: this.url,\n          chunk_size: this.chunk_size,\n          headers: this.headers,\n          multipart: this.multipart,\n          max_retries: this.max_retries,\n          multi_selection: this.multi_selection,\n          unique_names: this.unique_names,\n          file_data_name: this.file_data_name,\n          flash_swf_url: this.flash_swf_url,\n          silverlight_xap_url: this.silverlight_xap_url,\n          preinit: preInitMethod,\n          init: initMethod\n        };\n        if (this.filters != null) {\n          prop[\"filters\"] = this.filters;\n        }\n        if (this.multipart_params != null) {\n          prop[\"multipart_params\"] = this.multipart_params;\n        }\n        if (this.resize != null) {\n          prop[\"resize\"] = this.resize;\n        }\n        if (this.drop_element != null) {\n          prop[\"drop_element\"] = this.drop_element;\n        }\n        if (this.required_features != null) {\n          prop[\"required_features\"] = this.required_features;\n        }\n        let uploader = new plupload.Uploader(prop);\n        uploader.init();\n        /**finally catch it */\n        this.up = uploader;\n      }\n    },\n    mounted() {\n      this.init();\n    }\n  }\n</script>\n"]},"metadata":{},"sourceType":"module"}